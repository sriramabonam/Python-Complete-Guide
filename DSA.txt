1.
def merge_sorted_arrays(nums1, nums2):
    merged = []
    i, j = 0, 0

    while i < len(nums1) and j < len(nums2):
        if nums1[i] <= nums2[j]:
            merged.append(nums1[i])
            i += 1
        else:
            merged.append(nums2[j])
            j += 1

    # Add any remaining elements from the first array
    while i < len(nums1):
        merged.append(nums1[i])
        i += 1

    # Add any remaining elements from the second array
    while j < len(nums2):
        merged.append(nums2[j])
        j += 1

    return merged
2.
class Solution:
    def removeDuplicates(self, nums: List[int]) -> int:
        i, j = 0, 0
        while j < len(nums):
            if nums[j] == nums[i]:
                j += 1
            else:
                i += 1 
                nums[i] = nums[j]
        return i+1
3.
class Solution:
    def reverseWords(self, s: str) -> str:
        temp=s.split()
        temp.reverse()
        ans=" ".join(temp)

        return ans
4.
class Solution:
    def isPalindrome(self, s: str) -> bool:
        raw = ''.join(ch for ch in s if ch.isalnum()).lower()
        return raw[::-1] == raw
5.
class Solution:
    def twoSum(self, nums: List[int], target: int) -> List[int]:
         seen = {}
         for i, value in enumerate(nums):
            remaining = target - nums[i]
           
            if remaining in seen:
               return [i, seen[remaining]]
            
            seen[value] = i
6.
class Solution:
     def removeElement(self, nums: List[int], val: int) -> int:
        index = 0
        for i in range(len(nums)):
            if nums[i] != val:
                nums[index] = nums[i]
                index += 1
        return index
   
7.
class Solution:
    def majorityElement(self, nums: List[int]) -> int:
        nums.sort()
        n = len(nums)
        return nums[n//2]
8.
class Solution:
     def rotate(self, nums: List[int], k: int) -> None:
        n=len(nums)
        k=k%n
        nums[:n-k]=nums[:n-k][::-1]
        nums[n-k:]=nums[n-k:][::-1]
        nums[:]=nums[::-1]
9.
class Solution:
    def twoSum(self, arr: List[int], target: int) -> List[int]:
        left, right = 0, len(arr) - 1

        while left < right:
            curr_sum = arr[left] + arr[right] 
            if curr_sum == target:
                return [left + 1, right + 1]
            elif curr_sum < target:
                left += 1
            else:
                right -= 1
10.

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def addTwoNumbers(l1, l2):
    dummy_head = ListNode()
    current = dummy_head
    carry = 0

    while l1 or l2 or carry:
        sum_val = carry

        if l1:
            sum_val += l1.val
            l1 = l1.next

        if l2:
            sum_val += l2.val
            l2 = l2.next

        carry = sum_val // 10
        current.next = ListNode(sum_val % 10)
        current = current.next

    return dummy_head.next
11.

# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def mergeTwoLists(self, list1: Optional[ListNode], list2: Optional[ListNode]) -> Optional[ListNode]:
        newHead = dummyHead = ListNode()
        while list1 and list2:
            if list1.val < list2.val:
                dummyHead.next = list1
                list1 = list1.next
            else:
                dummyHead.next = list2
                list2 = list2.next
            dummyHead = dummyHead.next
        
        if list1:
            dummyHead.next = list1
        if list2:
            dummyHead.next = list2
        return newHead.next
12.
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def reverseBetween(self, head: Optional[ListNode], left: int, right: int) -> Optional[ListNode]:
        new=[]
        while(head):
            new.append(head.val)
            head=head.next
        l=new[left-1:right][::-1]
        w=new[:left-1]+l+new[right:]
        final=None
        for i in w[::-1]:
            final=ListNode(i,final)
        return final
13.
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def deleteDuplicates(self, head: Optional[ListNode]) -> Optional[ListNode]:
        dummy=ListNode(-1,head)
        # dummy=ListNode()
        dummy.next=head
        p=dummy
        def has_R(q):
            if not q or not q.next:
                return False
            if q.val==q.next.val:
                return True
            return False
        while p:
            if has_R(p.next):
                val=p.next.val
                while p.next and p.next.val==val:
                    p.next=p.next.next
            else:
                p=p.next
        return dummy.next
14.
class Solution:
    def lengthOfLastWord(self, s: str) -> int:
        s = s.rstrip()
        i = len(s)-1
        while s[i] != " " and i>=0:
            i-=1

        return (len(s)-1)-i
15.
class Solution:
    def containsNearbyDuplicate(self, nums: List[int], k: int) -> bool:
        d1 = {}
        for key, val in enumerate(nums):
            if val not in d1:
                d1[val] = key
            else:
                if abs(d1.get(val) - key) <= k:
                    return True
                else:
                    d1[val] = key

        return False
16.

class MinStack:
    def __init__(self):
        self.A = []
        self.M = []
    def push(self, x):
        self.A.append(x)
        self.M.append( x if not self.M else min(x, self.M[-1]) )
    def pop(self):
        self.A.pop()
        self.M.pop()
    def top(self):
        return self.A[-1]
    def getMin(self):
        return self.M[-1]
        


# Your MinStack object will be instantiated and called as such:
# obj = MinStack()
# obj.push(val)
# obj.pop()
# param_3 = obj.top()
# param_4 = obj.getMin()
17.
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def maxDepth(self, root: Optional[TreeNode]) -> int:
        def find_depth(node,l):
            if node is None:
                return l
            
            l += 1
            # find_depth(node.left,l)
            # find_depth(node.right,l)
            return max(find_depth(node.left,l),find_depth(node.right,l))
        return find_depth(root,0)
18.
class Solution:
    def hIndex(self, citations: List[int]) -> int:
        if len(citations) == 0:
            return 0
        
        res = 0
        citations.sort(reverse = True)
        
        if citations[-1] >= len(citations):
            return len(citations)
        
        for i in range(1, len(citations)+1):
            if i > citations[i-1]:
                res = i-1
                break
        return res
                
19.
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def hasCycle(self, head: Optional[ListNode]) -> bool:
        s, f = head,head
        while f and f.next: 
            s = s.next
            f = f.next.next
            if f == s: return True
        return False
        
20.
# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution(object):
    def removeNthFromEnd(self, head, n):
        """
        :type head: ListNode
        :type n: int
        :rtype: ListNode
        """
        slow = head
        fast = head
        for i in range(n):
            fast = fast.next

        if fast == None:
            return head.next

        while fast.next != None:
            fast = fast.next
            slow = slow.next

        slow.next = slow.next.next
        return head

21.
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def rotateRight(self, head: Optional[ListNode], k: int) -> Optional[ListNode]:
        if head is None or head.next is None or k == 0:
            return head
        
        # Obtener la longitud de la lista enlazada
        length = 0
        itr = head
        while itr:
            length += 1
            itr = itr.next
        
        # Obtener la cantidad de pasos necesarios para rotar
        k = k % length
        
        # Si k es igual a 0, no es necesario rotar
        if k == 0:
            return head
        
        # Obtener el nodo en la posición (length - k)
        itr = head
        for i in range(length - k - 1):
            itr = itr.next
        
        # Hacer la rotación
        new_head = itr.next
        itr.next = None
        itr = new_head
        while itr.next:
            itr = itr.next
        itr.next = head
        
        return new_head
22.
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution(object):
    def partition(self, head, x):
        dummyS, dummyG  = ListNode(), ListNode()
        prevS, prevG = dummyS, dummyG
        curr = head
        while curr:
            if curr.val < x:
                prevS.next, prevS = curr, curr
            else:
                prevG.next, prevG= curr, curr
            curr.next, curr = None, curr.next
        prevS.next = dummyG.next
        return dummyS.next
23.
class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        if len(set(prices))<2:
            return 0
        maxp = 0
        minp = prices[0]
        for i in range(1, len(prices)):		
            maxp = max(maxp, prices[i] - minp)
            minp = min(minp, prices[i])
        return maxp
24.

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def averageOfLevels(self, root: Optional[TreeNode]) -> List[float]:
        q = deque([root])
        ans = []
        while q:
            qsize = len(q)
            sum_ = 0
            count = 0
            for _ in range(qsize):
                node = q.popleft()
                if node:
                    sum_ += node.val
                    count += 1
                if node.left:
                    q.append(node.left)
                if node.right:
                    q.append(node.right)
            ans.append(sum_/count)
        return ans
25. 

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def getMinimumDifference(self, root: Optional[TreeNode]) -> int:
        def inorderTraversal(root):
            res = []
            if root:
                res = inorderTraversal(root.left)
                res.append(root.val)
                res = res + inorderTraversal(root.right)
            return res

        def findMinDiff(arr, n):
        
            diff = 10**20

            for i in range(n-1):
                if arr[i+1] - arr[i] < diff:
                    diff = arr[i+1] - arr[i]

            return diff

        res = sorted(inorderTraversal(root))
        n = len(res)
        ans = findMinDiff(res,n)
        return ans
26.
class Solution(object):
    def isValidSudoku(self, board):
        res = []
        for i in range(9):
            for j in range(9):
                element = board[i][j]
                if element != '.':
                    res += [(i, element), (element, j), (i // 3, j // 3, element)]
        return len(res) == len(set(res))
27.

class Solution:
    def spiralOrder(self, matrix: List[List[int]]) -> List[int]:
        m = len(matrix)
        n = len(matrix[0])

        move = [(0, 1), (1, 0), (0, -1), (-1, 0)]
        remains = m * n

        i = 0
        j = 0
        order = 0
        answer = []
        while remains > 0:
            answer.append(matrix[i][j])
            matrix[i][j] = -999
            remains -= 1

            for _ in range(len(move)):
                di, dj = move[order]
                ni = i + di
                nj = j + dj
                if 0 <= ni < m and 0 <= nj < n and matrix[ni][nj] >= -100:
                    i = ni
                    j = nj
                    break
                else:
                    order = (order + 1) % len(move)
        return answer



